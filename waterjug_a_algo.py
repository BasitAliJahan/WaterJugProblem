# -*- coding: utf-8 -*-
"""WaterJug_A*algo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rI331rLMfKgx_MS5PxU9_O8V6EaZ9e7R
"""

import heapq

# Define jug capacities and goal volume
JUG1 = 4
JUG2 = 3
GOAL = 2

def heuristic(state):
    x, y = state
    return min(abs(x - GOAL), abs(y - GOAL))

def a_star_water_jug():
    start = (0, 0)
    open_list = []
    heapq.heappush(open_list, (heuristic(start), 0, [start]))
    visited = {}

    while open_list:
        f, g, path = heapq.heappop(open_list)
        state = path[-1]

        if state[0] == GOAL or state[1] == GOAL:
            return path

        if state in visited and visited[state] <= g:
            continue
        visited[state] = g

        x, y = state
        next_states = [
            (JUG1, y),  # Fill Jug1
            (x, JUG2),  # Fill Jug2
            (0, y),     # Empty Jug1
            (x, 0),     # Empty Jug2
            # Pour Jug1 -> Jug2
            (x - min(x, JUG2 - y), y + min(x, JUG2 - y)),
            # Pour Jug2 -> Jug1
            (x + min(y, JUG1 - x), y - min(y, JUG1 - x))
        ]

        for nxt in next_states:
            if nxt not in visited or g + 1 < visited.get(nxt, float('inf')):
                new_path = list(path)
                new_path.append(nxt)
                new_g = g + 1
                new_f = new_g + heuristic(nxt)
                heapq.heappush(open_list, (new_f, new_g, new_path))

    return None

solution = a_star_water_jug()
if solution:
    print("A* Solution path:")
    for step in solution:
        print(step)
else:
    print("No solution found.")