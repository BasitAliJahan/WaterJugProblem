# -*- coding: utf-8 -*-
"""WaterJugDFS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kx0TcmHTEOAQpsj0nXbvkrmwBrUQotY8
"""

# Define jug capacities and goal volume
JUG1 = 4
JUG2 = 3
GOAL = 2

def water_jug_dfs():
    start = (0, 0)  # Initial state: both jugs empty
    stack = [[start]]
    visited = set()

    while stack:
        path = stack.pop()
        state = path[-1]

        # Check if either jug contains the goal amount
        if state[0] == GOAL or state[1] == GOAL:
            return path

        if state in visited:
            continue
        visited.add(state)

        x, y = state

        next_states = [
            (JUG1, y),  # Fill Jug1
            (x, JUG2),  # Fill Jug2
            (0, y),     # Empty Jug1
            (x, 0),     # Empty Jug2
            # Pour Jug1 -> Jug2
            (x - min(x, JUG2 - y), y + min(x, JUG2 - y)),
            # Pour Jug2 -> Jug1
            (x + min(y, JUG1 - x), y - min(y, JUG1 - x))
        ]

        for nxt in next_states:
            if nxt not in visited:
                new_path = list(path)
                new_path.append(nxt)
                stack.append(new_path)

    return None

solution = water_jug_dfs()
if solution:
    print("DFS Solution path:")
    for step in solution:
        print(step)
else:
    print("No solution found.")